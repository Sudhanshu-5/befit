<p id="date-absence-r">
  No record is added for this date !!
</p>
<div class="row">

    <canvas id="report1" width="200" height="200" class="mx-auto"></canvas>
    <canvas id="report2" width="200" height="200" class="mx-auto"></canvas>
    <canvas id="report3" width="300" height="100" class="mx-auto"></canvas>
<!-- <div class="row col-12 mt-2">
  <div class="col-6 ">Calories Consumed</div>
  <div class="col-6">Calories Burned</div>
</div> -->
     <div class="goal col-12 mt-5 p-0 mw-75" >
         
    </div>
      <div class="modal fade" id="suggestionModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body" id="suggestions-result">
                 <img src="images/spinner.gif" width="10%" height="10%" class="mx-auto">
              </div> 
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>   
     
  
</div>
<script>
 
  <% let fromIndex=0;%>
  <% let toIndex=0; %>
          
 data=[];
 data2=[];
 data3=[];
 data4=[];
 dates=[]
  $("#date-absence-r").hide();
		length = <%-calorieinfo.macroNutrientInfo.length%>;
var ctx = document.getElementById("report1").getContext("2d");
var ctx2 = document.getElementById("report2").getContext("2d");
 var ctx3 = document.getElementById("report3").getContext('2d');

            function getSuggestions(calories){
               //alert(calories)
              //console.log("winnnn "+calories)
               
              $.ajax({
                    type: "get", 
                    url: "/suggestion",
                    data:{calories:calories},
                    
                    //dataType: "html",
                    success: function (result) {
                    $('#suggestions-result').html(result);
                    
                    },
                    error: function (xhr, status) {
                        alert("Sorry, there was a problem :(");
                    },
                
                });
            }
function setData(goal,con,bur,bmr){
   
                       if(goal == "wLoss"){
                          data[0]=con;

                          if(bmr >= con){
                            data[1]=(bmr-con).toFixed(2);
                          }else{
                            data[1]=0
                          }
                        
                          data2[0]=bur

                          if(bmr >= bur){
                              data2[1]=(bmr-bur).toFixed(2)
                              data2[2]=500;
                        }
                            
                          else{
                              data2[1]=0;
                              data2[2]=(500-(bur - bmr)).toFixed(2)    
                              if(data2[2]<0) data2[2]=0
                          }
                          text=con/bmr
                          text2=bur/(bmr+500)
                          label2=['Calories burned','Remaining','Calorie deficit'];
                           label=['Calories consumed','Remaining'];
                           let remain=(bmr+500-bur).toFixed(2) ;
                           let goal_stmt;
                           if(remain>0){
                           goal_stmt= bur+" KCal are burned, "+remain+" KCal are more to down. <button type='button' class='btn btn-primary' data-toggle='modal' data-target='#suggestionModal'onclick='getSuggestions("+remain+")'>Suggestions</button> ";
                           }
                            else if(Math.abs(remain)>100 && remain<0 ){
                             goal_stmt="You have gone too far. This may lead to weakness. For a healthy weight loss stick to target."
                           }
                           else {
                             goal_stmt="Congrats!!!!!! You just did it ... we have taken a small step to your wait loss.<br>Now dont overdo it. Rest and be best for tommorow's challenge" 
                           }
                          
                       $(".goal").html(goal_stmt)    
                        
                       }
                       else if(goal == "wGain"){
                          data[0]=con;

                              if(bmr >= con){
                                data[1]=(bmr-con).toFixed(2)
                                data[2]=250;
                              }else{
                                data[1]=0
                                 data[2]=(250-(con -bmr)).toFixed()    
                                  if(data[2]<0) data[2]=0
                              }
                            
                              data2[0]=bur

                              if(bmr >= bur){
                                  data2[1]=bmr-bur;
                              }else{
                                  data2[1]=0;
                             }
                              text=con/(bmr+250)
                              text2=bur/bmr
                             
                           label=['Calories consumed','Remaining','Calorie surplus'];
                           label2=['Calories burned','Remaining'];
                            let remain=(bmr+250-con).toFixed(2) ;
                           let goal_stmt;
                           if(remain>0){
                           goal_stmt= con+" KCal are consumed, "+remain+" KCal are more to have. Eat healthy! "
                           }
                            else if(Math.abs(remain)>100 && remain<0 ){
                             goal_stmt="You have gone too far. Stick to diet."
                           }
                           else {
                             goal_stmt="Congrats!!!!!! You just did it ... we have taken a small step to your wait gain.<br>Eat healthy. " 
                           }
                          
                       $(".goal").html(goal_stmt) 
                          
                      }
                      else if(goal == "wMaintain"){
                        data[0]=con;
                         data2[0]=bur

                          if(bmr >= con){
                            data[1]=(bmr-con).toFixed(2) ;
                          }else{
                            data[1]=0
                          }
                            if(bmr >=bur){
                                  data2[1]=(bmr-bur).toFixed(2) ;
                              }else{
                                  data2[1]=0;
                             }
                             text=con/(bmr)
                              text2=bur/bmr 
                            label=['Calories consumed','Remaining'];
                           label2=['Calories burned','Remaining'];
                              let remain=(bmr-con).toFixed(2) ;
                           let goal_stmt;
                        
                           if(!remain){
                              goal_stmt="Congrats !!! You have achieved your daily calorie target"
                           }
                           else if(bur > con && bur>bmr+100){
                             goal_stmt="You are leading to weight loss. Try to achieve  suggested  calorie requirement to maintain your fitness"
                           }
                           else if(con>bur && con>bmr+100){
                             goal_stmt="You are leading to weight gain.  <button type='button' class='btn btn-primary' data-toggle='modal' data-target='#suggestionModal'onclick='getSuggestions("+Math.abs(remain)+")'>Suggestions</button>"
                           }
                           else if(con >bmr+100 || bur >bmr+100){
                             goal_stmt="Stick to diet !!!. "
                           }
                      }
                   
                  }
	if(<%-JSON.stringify(selected)%> == "today"){
            let today_dates  ;
            let info_date;
            let count=0;

      <%calorieinfo.macroNutrientInfo.forEach(function(info){%>
        today_dates=today.toLocaleDateString();
        info_date=<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>;
                  if(  today_dates === info_date){
                    setData(<%-JSON.stringify(calorieinfo.goal)%>,(<%-info.totalCaloriesConsumed%>).toFixed(2),(<%-info.totalCaloriesBurned%>).toFixed(2), <%-calorieinfo.bmr%>)
                        count++;
                        $(".progress").html(p_bar)        
               }
                 
        <%})%>
                  if(!count){
                    $("#date-absence-r").show();
                  }
		}
	

		else if(<%-JSON.stringify(selected)%> == "yesterday"){    
            let count=0;
            <%calorieinfo.macroNutrientInfo.forEach(function(info){%>
                   if( yesterday.toLocaleDateString() == '<%-(new Date(info.createdAt)).toLocaleDateString()%>'){
                   setData(<%-JSON.stringify(calorieinfo.goal)%>,<%-info.totalCaloriesConsumed%>,<%-info.totalCaloriesBurned%>, <%-calorieinfo.bmr%>)
                 count++;
                }
                  
             <%})%>
            if(!count){
               $("#date-absence-r").show();
             }
			      
      }
     
    else if(<%-JSON.stringify(selected)%> == "custom" && <%-JSON.stringify(from)%> && <%-JSON.stringify(to)%>){
         console.log("inside custpm")
        <% for(let i=0 ; i<calorieinfo.macroNutrientInfo.length ;i++){ %>
          //  console.log("andar"+<%-fromIndex%>)
// console.log(<%-JSON.stringify(calorieinfo.macroNutrientInfo[i]["createdAt"].toLocaleDateString())%>+"  =============  "+ <%-JSON.stringify(from)%>)
            <%if(JSON.stringify(calorieinfo.macroNutrientInfo[i]["createdAt"].toLocaleDateString()) === JSON.stringify(from)){%> 
              <%-fromIndex=i%>;
              valid_from=<%-i%>;
            console.log(<%-fromIndex%>+"fromIndex"+typeof(<%-fromIndex%>))
            <% }%>
// console.log(<%-JSON.stringify(calorieinfo.macroNutrientInfo[i]["createdAt"].toLocaleDateString())%>+" 2 =============  "+ <%-JSON.stringify(to)%>)

          <%if(JSON.stringify(calorieinfo.macroNutrientInfo[i]["createdAt"].toLocaleDateString()) === JSON.stringify(to)){%>
            <%-toIndex=i%>
            valid_to=<%-i%>;
           console.log(valid_to+"toindex")
            <%}%>

        <%}%>
        console.log("nkjndankds "+valid_to+"   "+valid_from);
             if(valid_to >=0){
               <% for(let i=fromIndex;i<=toIndex; i++){%>
                     console.log("111111111111111111 "+<%-i%>); 
                          if(<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>!==(new Date()).toLocaleDateString()){
                
		                 if(<%-JSON.stringify(calorieinfo.goal)%>=="wGain"){

                       data3.push(<%-calorieinfo.macroNutrientInfo[i].totalCaloriesConsumed%>-<%-calorieinfo.bmr%>);
                       dates.push(<%-JSON.stringify((new Date(calorieinfo.macroNutrientInfo[i].createdAt)).toLocaleDateString())%>);
                       sum+=<%-calorieinfo.macroNutrientInfo[i].totalCaloriesConsumed%>-<%-calorieinfo.bmr%>

                     }
                      else if(<%-JSON.stringify(calorieinfo.goal)%>=="wLoss"){

                       data3.push(<%-calorieinfo.macroNutrientInfo[i].totalCaloriesBurned%>-<%-calorieinfo.bmr%>);
                       dates.push(<%-JSON.stringify((new Date(calorieinfo.macroNutrientInfo[i].createdAt)).toLocaleDateString())%>);
                        sum+=<%-calorieinfo.macroNutrientInfo[i].totalCaloriesBurned%>-<%-calorieinfo.bmr%>

                     }
                      else if(<%-JSON.stringify(calorieinfo.goal)%>=="wMaintain"){

                        data3.push(<%-calorieinfo.macroNutrientInfo[i].totalCaloriesConsumed%>);
                        data4.push(<%-calorieinfo.macroNutrientInfo[i].totalCaloriesBurned%>);
                        dates.push(<%-JSON.stringify((new Date(calorieinfo.macroNutrientInfo[i].createdAt)).toLocaleDateString())%>);
                        sum+=<%-calorieinfo.macroNutrientInfo[i].totalCaloriesConsumed%>;
                        sum2+=<%-calorieinfo.macroNutrientInfo[i].totalCaloriesBurned%>;
                     
                      }
                    }

                    
               <%}%>
            }
            else{
              $("#date-absence-r").show();
            }
    	}

else{
    <%calorieinfo.macroNutrientInfo.forEach(function(info){%>
               // console.log(<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>+(new Date()).toLocaleDateString())
              if(<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>!==(new Date()).toLocaleDateString()){
                
		                 if(<%-JSON.stringify(calorieinfo.goal)%>=="wGain"){
                       data3.push(<%-info.totalCaloriesConsumed%>-<%-calorieinfo.bmr%>);
                       dates.push(<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>);
                       
                       sum+=<%-info.totalCaloriesConsumed%>-<%-calorieinfo.bmr%>
                     }
                      else if(<%-JSON.stringify(calorieinfo.goal)%>=="wLoss"){
                       data3.push(<%-info.totalCaloriesBurned%>-<%-calorieinfo.bmr%>);
                       dates.push(<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>);
                        sum+=<%-info.totalCaloriesBurned%>-<%-calorieinfo.bmr%>
                     }
                      else if(<%-JSON.stringify(calorieinfo.goal)%>=="wMaintain"){
                       data3.push(<%-info.totalCaloriesConsumed%>);
                        data4.push(<%-info.totalCaloriesBurned%>);
                         dates.push(<%-JSON.stringify((new Date(info.createdAt)).toLocaleDateString())%>);
                        sum+=<%-info.totalCaloriesConsumed%>;
                        sum2+=<%-info.totalCaloriesBurned%>;
                     }
                    }
                    
    <%})%>
    avg=sum/(<%-calorieinfo.macroNutrientInfo.length%>);
    if(<%-JSON.stringify(calorieinfo.goal)%>=="wLoss"){
       efficiency=avg/500;
       $("#efficiency").html(efficiency)
    }
     else if(<%-JSON.stringify(calorieinfo.goal)%>=="wGain"){
       efficiency=avg/250;
       $("#efficiency").html(efficiency)
    }
     else if(<%-JSON.stringify(calorieinfo.goal)%>=="wMaintain"){
       avg2=sum2/(<%-calorieinfo.macroNutrientInfo.length%>);
       efficiency=avg/<%-calorieinfo.bmr%>;
       efficiency2=avg2/<%-calorieinfo.bmr%>;
       $("#efficiency").html(efficiency)
    }
    if( !<%-calorieinfo.macroNutrientInfo.length-1%>){
       $("#date-absence-r").show();
    }
   
    }
if(data.length){
 var myChart = new Chart(ctx, {
  type: 'doughnut',
  data: {
    labels: label,
    datasets: [{
      label: 'calories',
      data: data,
      backgroundColor: [
        'rgba(20, 167, 108, .5)',
        'rgba(255, 101, 47, .5)',
        'rgba(241, 60, 32)'
        
        
      ],
      // borderColor: [
      //   'rgba(255, 101, 47, 1)',
      //   'rgba(20, 167, 108, 1))'
      // ],
      borderWidth: 1
    }]
  },
  options: {
   	 elements: {
      center: {
        text:Math.round(text*100)+"%" ,
        color: '#FF6384' // Default is #000000
        // fontStyle: 'Arial', // Default is Arial
        // sidePadding: 20, // Default is 20 (as a percentage)
        // minFontSize: 25, // Default is 20 (in px), set to false and text will not wrap.
        // lineHeight: 25 // Default is 25 (in px), used for when text wraps
      }
    },
    responsive: false,
    // maintainAspectRatio: true
  }
});
}
if(data2.length){
     var myChart2 = new Chart(ctx2, {
  type: 'doughnut',
  data: {
    labels: label2,
    datasets: [{
      label: 'calories',
      data: data2,
      backgroundColor: [
        'rgba(20, 167, 108, .5)',
        'rgba(255, 101, 47, .5)',
        'rgba(241, 60, 32)'
   
        
       ],
      // borderColor: [
      //   'rgba(255, 101, 47, 1)',
      //   'rgba(20, 167, 108, 1))'
      // ]
      
      borderWidth: 1
    }]
  },
  options: {
   	//cutoutPercentage: 40,
     elements: {
      center: {
        text:Math.round(text2*100)+"%" ,
        color: '#FF6384' // Default is #000000
        // fontStyle: 'Arial', // Default is Arial
        // sidePadding: 20, // Default is 20 (as a percentage)
        // minFontSize: 25, // Default is 20 (in px), set to false and text will not wrap.
        // lineHeight: 25 // Default is 25 (in px), used for when text wraps
      }
    },
    responsive: false,
    // maintainAspectRatio: true, // Add to prevent default behaviour of full-width/height 
    

  }
});
}
if (data3.length){
 var myChart = new Chart(ctx3, {
    type: 'line',
    data: {
        labels: dates,
        datasets: [{
            label: 'Series 1', // Name the series
            data:data3,
            fill: false,
            borderColor: '#2196f3', // Add custom color border (Line)
            backgroundColor: '#2196f3', // Add custom color background (Points and Fill)
            borderWidth: 1 // Specify bar border width
        }, 
           { label: 'Series 2', // Name the series
            data:data4,
            fill: false,
            borderColor: '#2196f3', // Add custom color border (Line)
            backgroundColor: '#2196f3', // Add custom color background (Points and Fill)
            borderWidth: 1 // Specify bar border width
    }]
    },
    options: {
      // responsive: false ,// Instruct chart js to respond nicely.
       maintainAspectRatio: true, // Add to prevent default behaviour of full-width/height 
    }
});
}//text center pluggin
   
Chart.pluginService.register({
      beforeDraw: function(chart) {
        if (chart.config.options.elements.center) {
          // Get ctx from string
          var ctx = chart.chart.ctx;

          // Get options from the center object in options
          var centerConfig = chart.config.options.elements.center;
          var fontStyle = centerConfig.fontStyle || 'Arial';
          var txt = centerConfig.text;
          var color = centerConfig.color || '#000';
          var maxFontSize = centerConfig.maxFontSize || 75;
          var sidePadding = centerConfig.sidePadding || 20;
          var sidePaddingCalculated = (sidePadding / 100) * (chart.innerRadius * 2)
          // Start with a base font of 30px
          ctx.font = "30px " + fontStyle;

          // Get the width of the string and also the width of the element minus 10 to give it 5px side padding
          var stringWidth = ctx.measureText(txt).width;
          var elementWidth = (chart.innerRadius * 2) - sidePaddingCalculated;

          // Find out how much the font can grow in width.
          var widthRatio = elementWidth / stringWidth;
          var newFontSize = Math.floor(30 * widthRatio);
          var elementHeight = (chart.innerRadius * 2);

          // Pick a new font size so it will not be larger than the height of label.
          var fontSizeToUse = Math.min(newFontSize, elementHeight, maxFontSize);
          var minFontSize = centerConfig.minFontSize;
          var lineHeight = centerConfig.lineHeight || 25;
          var wrapText = false;

          if (minFontSize === undefined) {
            minFontSize = 20;
          }

          if (minFontSize && fontSizeToUse < minFontSize) {
            fontSizeToUse = minFontSize;
            wrapText = true;
          }

          // Set font settings to draw it correctly.
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          var centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);
          var centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);
          ctx.font = fontSizeToUse + "px " + fontStyle;
          ctx.fillStyle = color;

          if (!wrapText) {
            ctx.fillText(txt, centerX, centerY);
            return;
          }

          var words = txt.split(' ');
          var line = '';
          var lines = [];

          // Break words up into multiple lines if necessary
          for (var n = 0; n < words.length; n++) {
            var testLine = line + words[n] + ' ';
            var metrics = ctx.measureText(testLine);
            var testWidth = metrics.width;
            if (testWidth > elementWidth && n > 0) {
              lines.push(line);
              line = words[n] + ' ';
            } else {
              line = testLine;
            }
          }

          // Move the center up depending on line height and number of lines
          centerY -= (lines.length / 2) * lineHeight;

          for (var n = 0; n < lines.length; n++) {
            ctx.fillText(lines[n], centerX, centerY);
            centerY += lineHeight;
          }
          //Draw text in center
          ctx.fillText(line, centerX, centerY);
        }
      }
    });

</script>


